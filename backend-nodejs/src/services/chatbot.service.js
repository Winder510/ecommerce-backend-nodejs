import {
    GoogleGenerativeAI
} from "@google/generative-ai";
import {
    SpuService
} from "./spu.service.js";
import dotenv from 'dotenv';
dotenv.config();

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

export class ChatBotService {
    static chatHistory = [];

    static async getAIChat({
        userMessage
    }) {
        try {
            // L·∫•y danh s√°ch s·∫£n ph·∫©m
            const response = await SpuService.findAllPublishSpu({
                limit: 1000,
                page: 1
            });
            const allProducts = response?.products || [];
            if (allProducts.length === 0) {
                return {
                    reply: "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p."
                };
            }

            // L·ªçc s·∫£n ph·∫©m li√™n quan (gi·∫£ s·ª≠ d·ª±a tr√™n t·ª´ kh√≥a trong userMessage)
            const keywords = userMessage.toLowerCase().split(" ");
            const relevantProducts = allProducts.filter(p =>
                keywords.some(k => p.product_name.toLowerCase().includes(k) ||
                    p.product_description.toLowerCase().includes(k))
            ).slice(0, 10); // Gi·ªõi h·∫°n 10 s·∫£n ph·∫©m ƒë·ªÉ tr√°nh qu√° t·∫£i

            const productInfo = relevantProducts.length > 0 ?
                relevantProducts
                .map(p => `${p.product_name}: ${p.product_description} - Gi√°: ${p.product_price} VND`)
                .join("\n") :
                "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu.";

            // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
            this.chatHistory.push({
                role: "user",
                content: userMessage
            });
            if (this.chatHistory.length > 10) {
                this.chatHistory.shift();
            }

            // ƒê·ªãnh d·∫°ng l·ªãch s·ª≠ h·ªôi tho·∫°i
            const formattedHistory = [{
                    role: "user",
                    parts: [{
                        text: `B·∫°n l√† m·ªôt tr·ª£ l√Ω b√°n h√†ng. H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, h·ªØu √≠ch d·ª±a tr√™n th√¥ng tin s·∫£n ph·∫©m v√† c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng. ƒê√¢y l√† danh s√°ch s·∫£n ph·∫©m: ${productInfo}`
                    }]
                },
                ...this.chatHistory.map(msg => ({
                    role: msg.role,
                    parts: [{
                        text: msg.content
                    }]
                }))
            ];

            console.log("üöÄ ~ ChatBotService ~ formattedHistory:", formattedHistory)


            // G·ªçi Gemini API
            const model = genAI.getGenerativeModel({
                model: "gemini-2.0-flash"
            });

            const result = await model.generateContent({
                contents: formattedHistory
            });

            const responseText = result.response?.text()?.trim();

            if (!responseText) {
                return {
                    reply: "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi ngay l√∫c n√†y."
                };
            }

            this.chatHistory.push({
                role: "model",
                content: responseText
            });

            return {
                reply: responseText
            };

        } catch (error) {
            console.error("L·ªói khi g·ªçi AI:", error);
            return {
                reply: "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n."
            };
        }
    }
}